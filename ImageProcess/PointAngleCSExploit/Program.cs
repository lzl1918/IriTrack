using PointAngleCS.Point;
using PointAngleCS.Processor;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace PointAngleCS
{
    public static class Program
    {
        private static List<Coord>[] ReadPoints(string path)
        {
            Stream file = File.OpenRead(path);
            StreamReader reader = new StreamReader(file);
            string content;
            string eye;
            string[] spt;
            double x, y, time;
            List<Coord> leftCoords = new List<Coord>();
            List<Coord> rightCoords = new List<Coord>();
            List<Coord>[] coords = new List<Coord>[2] { leftCoords, rightCoords };
            while ((content = reader.ReadLine()) != null)
            {
                spt = content.Split(',');
                eye = spt[0];
                time = double.Parse(spt[1]);
                x = double.Parse(spt[2]);
                y = double.Parse(spt[3]);
                if (eye == "l")
                    leftCoords.Add(new Coord(x, y, time));
                else if (eye == "r")
                    rightCoords.Add(new Coord(x, y, time));
            }
            if (leftCoords.Count > 0)
            {
                double firstTime = leftCoords.First().TimeOffset;
                foreach (Coord coord in leftCoords)
                {
                    coord.TimeOffset -= firstTime;
                }
            }
            if (rightCoords.Count > 0)
            {
                double firstTime = rightCoords.First().TimeOffset;
                foreach (Coord coord in rightCoords)
                {
                    coord.TimeOffset -= firstTime;
                }
            }
            return coords;
        }

        private static void WriteResult(ProcessResult result)
        {
            string line = string.Join(" ", result.NumberPredictions.Select(x => x.ToString()));
            Console.WriteLine(line);
        }

        public static void Main(string[] args)
        {
            if (args.Length < 1)
            {
                Console.WriteLine("Argument Error");
                return;
            }
            string pointsPath = args[0];

            List<Coord>[] eyePoints = ReadPoints(pointsPath);

            IProcessor processor = new DefaultProcessor();

            DateTime startTime = DateTime.Now;
            ProcessResult result = processor.Process(eyePoints[0]);
            WriteResult(result);
            Console.WriteLine("======");

            result = processor.Process(eyePoints[1]);
            DateTime endTime = DateTime.Now;
            WriteResult(result);
            Console.WriteLine((endTime - startTime).TotalMilliseconds);
        }
    }
}
